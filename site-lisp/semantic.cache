;; Object lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "lisp/"
  :tables (list 
   (semanticdb-table "ruby-mode.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("ruby-mode-revision" variable (:constant-flag t :default-value "$Revision: 1.2 $") nil [137 185]) ("ruby-mode-version" variable (:constant-flag t :default-value (progn (string-match "[0-9.]+" ruby-mode-revision) (substring ruby-mode-revision (match-beginning 0) (match-end 0)))) nil [187 340]) ("ruby-block-beg-re" variable (:constant-flag t :default-value "class\\|module\\|def\\|if\\|unless\\|case\\|while\\|until\\|for\\|begin\\|do") nil [342 454]) ("ruby-non-block-do-re" variable (:constant-flag t :default-value "\\(while\\|until\\|for\\|rescue\\)\\>") nil [456 532]) ("ruby-indent-beg-re" variable (:constant-flag t :default-value "\\(\\s *\\(class\\|module\\|def\\)\\)\\|if\\|unless\\|case\\|while\\|until\\|for\\|begin") nil [534 661]) ("ruby-modifier-beg-re" variable (:constant-flag t :default-value "if\\|unless\\|while\\|until") nil [663 729]) ("ruby-modifier-re" variable (:constant-flag t :default-value (concat ruby-modifier-beg-re "\\|rescue")) nil [731 805]) ("ruby-block-mid-re" variable (:constant-flag t :default-value "then\\|else\\|elsif\\|when\\|rescue\\|ensure") nil [807 887]) ("ruby-block-op-re" variable (:constant-flag t :default-value "and\\|or\\|not") nil [889 938]) ("ruby-block-hanging-re" variable (:constant-flag t :default-value (concat ruby-modifier-beg-re "\\|" ruby-block-op-re)) nil [940 1030]) ("ruby-block-end-re" variable (:constant-flag t :default-value "end") nil [1032 1066]) ("ruby-here-doc-beg-re" variable (:constant-flag t :default-value "<<\\(-\\)?\\(\\([a-zA-Z0-9_]+\\)\\|[\"]\\([^\"]+\\)[\"]\\|[']\\([^']+\\)[']\\)") nil [1068 1182]) ("ruby-here-doc-end-match" function nil nil [1184 1365]) ("ruby-delimiter" variable (:constant-flag t :default-value (concat "[?$/%(){}#\"'`.:]\\|<<\\|\\[\\|\\]\\|\\<\\(" ruby-block-beg-re "\\|" ruby-block-end-re "\\)\\>\\|^=begin\\|" ruby-here-doc-beg-re)) nil [1367 1546]) ("ruby-negative" variable (:constant-flag t :default-value (concat "^[ 	]*\\(\\(" ruby-block-mid-re "\\)\\>\\|\\(" ruby-block-end-re "\\)\\>\\|}\\|\\]\\)")) nil [1548 1680]) ("ruby-operator-chars" variable (:constant-flag t :default-value "-,.+*/%&|^~=<>:") nil [1682 1730]) ("ruby-operator-re" variable (:constant-flag t :default-value (concat "[" ruby-operator-chars "]")) nil [1731 1795]) ("ruby-symbol-chars" variable (:constant-flag t :default-value "a-zA-Z0-9_") nil [1797 1838]) ("ruby-symbol-re" variable (:constant-flag t :default-value (concat "[" ruby-symbol-chars "]")) nil [1839 1899]) ("ruby-mode-abbrev-table" variable nil nil [1901 1982]) ("define-abbrev-table" code nil nil [1984 2032]) ("ruby-mode-map" variable nil nil [2034 2088]) ("if" code nil nil [2090 2965]) ("ruby-mode-syntax-table" variable nil nil [2967 3048]) ("if" code nil nil [3050 4565]) ("ruby-indent-tabs-mode" variable (:user-visible-flag t) nil [4567 4700]) ("ruby-indent-level" variable (:user-visible-flag t :default-value 2) nil [4702 4800]) ("ruby-comment-column" variable (:user-visible-flag t :default-value 32) nil [4802 4903]) ("ruby-deep-arglist" variable (:user-visible-flag t :default-value t) nil [4905 5054]) ("ruby-deep-indent-paren" variable (:user-visible-flag t :default-value (quote (40 91 93 t))) nil [5056 5250]) ("ruby-deep-indent-paren-style" variable (:default-value (quote space)) nil [5252 5369]) ("cl" include nil nil [5390 5403]) ("ruby-imenu-create-index-in-block" function (:arguments ("prefix" "beg" "end")) nil [5405 6732]) ("ruby-imenu-create-index" function nil nil [6734 6836]) ("ruby-accurate-end-of-block" function (:arguments ("&optional" "end")) nil [6838 7048]) ("ruby-mode-variables" function nil nil [7050 8085]) ("ruby-mode" function (:user-visible-flag t) nil [8102 8840]) ("ruby-current-indentation" function nil nil [8842 8967]) ("ruby-indent-line" function (:arguments ("&optional" "flag")) nil [8969 9103]) ("ruby-indent-command" function nil nil [9105 9174]) ("ruby-indent-to" function (:arguments ("x")) nil [9176 9689]) ("ruby-special-char-p" function (:arguments ("&optional" "pnt")) nil [9691 9971]) ("ruby-expr-beg" function (:arguments ("&optional" "option")) nil [9973 11032]) ("ruby-forward-string" function (:arguments ("term" "&optional" "end" "no-error" "expand")) nil [11034 11575]) ("ruby-deep-indent-paren-p" function (:arguments ("c")) nil [11577 11937]) ("ruby-parse-partial" function (:arguments ("&optional" "end" "in-string" "nest" "depth" "pcol" "indent")) nil [11939 18022]) ("ruby-parse-region" function (:arguments ("start" "end")) nil [18024 18480]) ("ruby-indent-size" function (:arguments ("pos" "nest")) nil [18482 18561]) ("ruby-calculate-indent" function (:arguments ("&optional" "parse-start")) nil [18563 23930]) ("ruby-electric-brace" function (:arguments ("arg")) nil [23932 24114]) ("defun-region-command" function (:arguments ("func" "args" "&rest" "body")) nil [24137 24456]) ("defun-region-command" code nil nil [24459 24815]) ("ruby-beginning-of-indent" function nil nil [24817 24982]) ("defun-region-command" code nil nil [24984 25338]) ("ruby-move-to-block" function (:arguments ("n")) nil [25340 26213]) ("defun-region-command" code nil nil [26215 26380]) ("defun-region-command" code nil nil [26382 26536]) ("defun-region-command" code nil nil [26538 27833]) ("defun-region-command" code nil nil [27835 29145]) ("ruby-reindent-then-newline-and-indent" function nil nil [29147 29398]) ("fset" code nil nil [29400 29463]) ("ruby-decomment-region" function (:arguments ("beg" "end")) nil [29465 29697]) ("ruby-insert-end" function nil nil [29699 29797]) ("ruby-mark-defun" function (:user-visible-flag t) nil [29799 30049]) ("ruby-indent-exp" function (:user-visible-flag t :arguments ("&optional" "shutup-p")) nil [30051 30804]) ("ruby-add-log-current-method" function nil nil [30806 31828]) ("cond" code nil nil [31830 38726]) ("ruby-mode" package nil nil [38729 38749]))
    :file "ruby-mode.el"
    :pointmax 38750
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre3"
  :semanticdb-version "2.0pre3"
  )
