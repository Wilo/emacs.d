This is ecb.info, produced by makeinfo version 4.2 from ecb.texi.

INFO-DIR-SECTION GNU Emacs Lisp
START-INFO-DIR-ENTRY
* ECB: (ecb).           Emacs Code Browser
END-INFO-DIR-ENTRY


File: ecb.info,  Node: ecb-directories,  Next: ecb-sources,  Prev: ecb-tree-buffer,  Up: Customizable options

Group ecb-directories
---------------------

This group contains settings for the directories-buffer in the ECB:

 - User Option: add-path-for-not-matching-files
   Add path of a file to `ecb-source-path' if not already contained.  This is
   done during the auto. windows synchronization which happens if a file is
   opened not via the file/directory-browser of ECB. In such a situation ECB
   adds the path of the new file auto. to `ecb-source-path' at least
   temporally for the current Emacs session. This option defines two things:

   1. Should only the root-part (which means for Unix-like systems always '/'
      and for windows-like systems the drive) of the new file be added as
      source-path to `ecb-source-path' or the whole directory-part?  For
      remote-files (e.g. tramp, ange-ftp- or efs-files) the root-part is the
      complete host-part + the root-dir at that host (example:
      /berndl@ecb.sourceforge.net:/ would be the root-part of
      /berndl@ecb.sourceforge.net:/tmp/test.txt).

   2. Should this path be added for future sessions too?

   The value of this option is a cons-cell where the car is a boolean for 1.
   and the cdr is a boolean for 2.

   A value of not nil for the car (1.) is reasonably if a user often opens
   files not via the ECB-browser which are not located in any of the paths of
   `ecb-source-path' because then only one path for each drive (windows) or
   the root-path (Unix) is added to the directory buffer of ECB.

 - User Option: auto-expand-directory-tree
   Automatically expand the directory tree to the current source file.  There
   are three options:

    - `best': Expand the best-matching source-path

    - `first': Expand the first matching source-path

    - `nil': Do not automatically expand the directory tree.

 - User Option: after-directory-change-hook
   Hook which run directly after the selected directory has changed. This
   means not onyl after a click onto a directory in the directory-window of
   ECB but it means this hook runs always when the current directory changes
   regardless of the trigger of this change. So for example it runs also when
   you just switches from one buffer to another via `switch-to-buffer' or
   `switch-to-buffer-other-window' and the directory of these filebuffers is
   different but only when auto-synchronizing of the ECB-windows is on (see
   `ecb-window-sync'). It runs not when switching between buffers and the
   associated files reside in the same directory.

   Each function added to this hook will be called with two arguments: The
   directory which was current _before_ the directory-change-trigger and the
   directory which was now the current (i.e. after the trigger).

   Example: If you switch from a filebuffer "~/.emacs" to a filebuffer
   "/tmp/test.txt" then the functions of this hook will be called with the
   two arguments "~" and "/tmp".

 - User Option: cache-directory-contents
   Cache contents of directories.

   This can be useful if `ecb-source-path' contains directories with many
   files and subdirs, especially if these directories are mounted net-drives
   ("many" means here something > 500, dependent of the speed of the
   net-connection and the machine). Or if it contains remote-source-paths
   which means paths in the sense of tramp, ange-ftp or efs. For these
   directories actualizing the sources- and/or directories- buffer of ECB (if
   displayed in current layout!) can slow down dramatically so a caching
   increases speed a lot.

   The value of this option is a list where each element is a cons-cell and
   looks like:

        (<dir-regexp> . <filenumber threshold>) with

  `<dir-regexp>:'
      Regular expression a directory must match to be cached.

  `<filenumber threshold>:'
      Number of directory contents must exceed this number.

   A directory will only be cached if and only if the directory-name matches
   at least one rexexp of this option and its content-number exceeds the
   related threshold AND the directory-name matches NOT any regexp of
   `ecb-cache-directory-contents-not'!

   The cache entry for a certain directory will be refreshed and actualized
   only by using the POWER-click (see `ecb-primary-secondary-mouse-buttons')
   in the directories-buffer of ECB (*note Using the mouse::).

   Default-value: ECB caches the contents of all remote directories
   regardless of the size and all other directories if more than 50 entries
   are contained.

   Examples:

   An entry `("/usr/home/john_smith/bigdir*" . 1000)' means the contents of
   every subdirectory of the home-directory of John Smith will be cached if
   the directory contains more than 1000 entries and its name begins with
   "bigdir".

   An entry `(".*" . 1000)' caches every directory which has more than 1000
   entries.

   An entry `("^/\\([^:/]*@\\)?\\([^@:/]*\\):.*" . 0)' caches every remote
   (in the sense of tramp, ange-ftp or efs) directory regardless of the
   number of entries."

   Please note: If you want your home-dir being cached then you MUST NOT use
   "~" because ECB tries always to match full path-names!

 - User Option: cache-directory-contents-not
   Do not cache the contents of certain directories. The value of this option
   is a list where the each element is a regular expression a directory must
   match if it should not being cached.

   If a directory-name matches at least one of the regexps of this option the
   directory-contents will never being cached. See
   `ecb-cache-directory-contents' to see when a directory will be cached.

   This option can be useful when normally all directories with a certain
   amount of content (files and subdirs) should be cached but some special
   directories not. This can be achieved by:

    - Setting `ecb-cache-directory-contents' to ((".*" . 500)): Caches all
      directories with more then 500 entries

    - Setting `ecb-cache-directory-contents-not' to a value which matches
      these directories which should not being cached (e.g.
      ("/usr/home/john_smith") excludes the HOME-directory of John Smith from
      being cached).

   Please note: If you want your home-dir exclude from being cached then you
   MUST NOT use "~" because ECB tries always to match full path-names!

 - User Option: directories-buffer-after-create-hook
   Local hook running after the creation of the directories-buffer. Every
   function of this hook is called once without arguments direct after
   creating the directories-buffer of ECB and it's local key-map. So for
   example a function could be added which performs calls of `local-set-key'
   to define new keybindings only for the directories-buffer of ECB.

   The following keys must not be rebind in the directories-buffer: `F2',
   `F3' and `F4'

 - User Option: directories-buffer-name
   Name of the ECB directory buffer. Because it is not a normal buffer for
   editing you should enclose the name with stars, e.g. " *ECB Directories*".

   If it is necessary for you you can get emacs-lisp access to the
   buffer-object of the ECB-directory-buffer by this name, e.g. by a call of
   `set-buffer'.

   Changes for this option at runtime will take affect only after
   deactivating and then activating ECB again!

 - User Option: directories-menu-sorter
   Function which re-sorts the menu-entries of the directories buffer.

   If a function then this function is called to re-arrange the menu-entries
   of the combined menu-entries of the user-menu-extensions of
   `ecb-directories-menu-user-extension' and the built-in-menu
   `ecb-directories-menu'. If nil then no special sorting will be done and
   the user-extensions are placed in front of the built-in-entries.

   The function get one argument, a list of menu-entries. For the format of
   this argument see `ecb-directories-menu-user-extension'. The function must
   return a new list in the same format. Of course this function can not only
   re-arrange the entries but also delete entries or add new entries.

 - User Option: directories-menu-user-extension
   Static user extensions for the popup-menu of the directories buffer.
   Value is a list of elements of the following type: Each element defines a
   new menu-entry and is either:

   1. Menu-command: A list containing two sub-elements, whereas the first is
      the function (a function symbol) being called if the menu-entry is
      selected and the second is the name of the menu-entry.

   2. Separator: A one-element-list and the element is the string "--": Then a
      non-selectable menu-separator is displayed.

   3. Submenu: A list where the first element is the title of the submenu
      displayed in the main-menu and all other elements are either
      menu-commands (see 1) or separators (see 2) or another submenu (see c).
      This allows deep nested menu-submenu-structures. Currently a level of 4
      is allowed but in general there could be an infinite depth of nesting
      but it makes no sense - if possible at all - to define infinite nested
      defcustom-types. So there is a limit of 4 levels but tis is not a hard
      limit: Just increase the value of the `ecb-max-submenu-depth' *BEFORE*
      first loading ECB!

   The function of a menu-command must follow the following guidelines: Such
   a function must be defined with the macro `tree-buffer-defpopup-command'!
   This macro defines a new popup-command whereas the newly defined command
   gets one argument NODE. See the docstring of `tree-buffer-defpopup-command'
   for further details.

   Example for the definition of such a menu-function:

      (tree-buffer-defpopup-command ecb-my-special-dir-popup-function
        "Prints the name of the directory of the node under point."
        (let ((node-data=dir (tree-node-get-data node)))
           (message ``Dir under node: %s'' node-data=dir)))

   Per default the static user-extensions are added at the beginning of the
   built-in menu-entries of `ecb-directories-menu' but the whole menu can be
   re-arranged with `ecb-directories-menu-sorter'.

   These menu-extensions are static. A dynamic menu-extension can be achieved
   via `ecb-directories-menu-user-extension-function'.

 - User Option: directories-menu-user-extension-function
   Dynamic user extensions for the popup-menu of the directories buffer.  A
   function which has to return a list in the same format like the option
   `ecb-directories-menu-user-extension'. This function is called when the
   user opens the popup-menu for the directories buffer.

   Per default the dynamic user-extensions are added in front of the static
   extensions of `ecb-directories-menu-user-extension' but the whole menu can
   be re-arranged with `ecb-directories-menu-sorter'.

 - User Option: display-default-dir-after-start
   Automatically display current default-directory after activating ECB.

   If a file-buffer is displayed in the current active edit-window then ECB
   synchronizes its tree-buffers to this file-buffer - at least if the option
   `ecb-window-sync' it not nil. So for this situation
   `ecb-display-default-dir-after-start' takes no effect but this option is
   for the case if no file-buffer is displayed in the edit-window after
   startup:

   If true then ECB selects autom. the current default-directory after
   activation even if no file-buffer is displayed in the current active
   edit-window. This is useful if ECB is autom. activated after startup of
   Emacs and Emacs is started without a file-argument. So the directory from
   which the startup has performed is auto. selected in the ECB-directories
   buffer and the ECB-sources buffer displays the contents of this directory.

 - User Option: excluded-directories-regexps
   Directories that should not be included in the directories list. The value
   of this variable should be a list of regular expression.

 - User Option: prescan-directories-for-emptyness
   Prescan directories for emptyness. ECB does this so directories are
   displayed as empty in the directories-buffer even without user-interaction
   (i.e. in previous ECB-versions the emptyness of a directory has been first
   checked when the user has clicked onto a directory). ECB optimizes this
   check as best as possible but if a directory contains a lot of
   subdirectories which contain in turn a lot of entries, then expanding such
   a directory or selecting it would take of course more time as without this
   check - at least at the first time (all following selects of a directory
   uses the cached information if its subdirectories are empty or not).
   Therefore ECB performs this check stealthy (see
   `ecb-stealthy-tasks-delay') so normally there should no
   performance-decrease or additional waiting-time for the user. There is one
   exception: For remote directories (in the sense of tramp, ange-ftp, or
   efs) this check can descrease performance even if performed stealthy and
   interruptable. Therefore this option offers three possible settings:

    * `t' Switch on this feature

    * `unless-remote' Switch on this feature but not for remote directories.
      The term "remote" means here directories which are used via tramp,
      ange-ftp or efs. So mounted directories are counted not as remote
      directories here even if such a directory is maybe hosted on a remote
      machine. But normally only directories in a LAN are mounted so there
      should be no performance-problems with such mounted directories.

    * `nil' Switch off this feature completely.

   The option `ecb-prescan-directories-exclude-regexps' offers are more fine
   granularity to exclude certain directories from this prescan.

 - User Option: host-accessible-check-valid-time
   Time in seconds a cached accessible-state of a remote host is valid.  This
   option is a list where each element specifies how long for a certain
   remote host the cached ping-state (i.e. if the host is accessible or not)
   should be valid. During this time-intervall ECB pings such a remote host
   only once, all other checks use the cached value of that real check. But
   it the cached value is older than the value of this option ECB will ping
   again.

   Per default ECB discards after 1 minute the cached ping-state of each
   remote host. But if you are sure that a certain remote host is always
   accessible (i.e. means in consequence that you are always online when
   working with ECB and remote-paths) then add an entry to this option with a
   high valid-interval.

   Examples: An entry (".*sourceforge.*" . 3600) ensures that all remote
   hosts machting the string "sourceforge" will only once pinged during one
   hour. Or (".*" . 300) would ensure that every remote host would be pinged
   only once during 5 minutes.

 - User Option: ping-options
   List of options for the ping program. These options can be used to limit
   how many ICMP packets are emitted. Ping is used to test if a remote host
   of a remote path (e.g. a tramp-, ange-ftp- or efs-path) is accessible See
   also `ecb-ping-program'.

 - User Option: ping-program
   Program to send network test packets to a host. See also
   `ecb-ping-options'.

 - User Option: prescan-directories-exclude-regexps
   Which directories should be excluded from the empty-prescan. If a
   directory matches any of the regexps of this option it will not be
   prescanned for emptyness - This option takes only effect if
   `ecb-prescan-directories-for-emptyness' is not nil.

 - User Option: show-sources-in-directories-buffer
   Show source files in directories buffer.

 - User Option: source-path
   Paths where to find code sources. Each path can have an optional alias
   that is used as it's display name. If no alias is set, the path is used as
   display name.

 - User Option: source-path
   Paths where to find code sources. Each path can have an optional alias
   that is used as it's display name. If no alias is set, the path is used as
   display name.

   Lisp-type of tis option: The value must be a list L whereas each element
   of L is either
    - a simple string which has to be the full path of a directory (this
      string is displayed in the directory-browser of ECB) or

    - a 2-element list whereas the first element is the full path of a
      directory (string) and the second element is an arbitrary alias
      (string) for this directory which is then displayed instead of the
      underlying directory.

 - User Option: use-speedbar-instead-native-tree-buffer
   If true then uses speedbar for directories, sources or methods. This means
   that speedbar is integrated in the ECB-frame and is displayed in that
   window normally displaying the standard ECB-directories-buffer,
   ECB-sources-buffer or ECB-methods-buffer.

   This option takes effect in all layouts which contain either a directory
   window, a sources window or a method window.

   This option can have four valid values:
    - `nil': Do not use speedbar (default)

    - `dir': Use speedbar instead of the standard directories-buffer

    - `source': Use speedbar instead of the standard sources-buffer

    - `method': Use speedbar instead of the standard methods-buffer

   Note: For directories and sources a similar effect and usability is
   available by setting this option to `nil' (or `method') and setting
   `ecb-show-sources-in-directories-buffer' to not `nil', because this
   combination displays also directories and sources in one window.

   `ecb-use-speedbar-instead-native-tree-buffer' is for people who like the
   speedbar way handling directories and source-files or methods and want it
   in conjunction with ECB.


File: ecb.info,  Node: ecb-sources,  Next: ecb-methods,  Prev: ecb-directories,  Up: Customizable options

Group ecb-sources
-----------------

This group contains settings for the sources-buffer in the ECB:

 - User Option: read-only-check-exclude-regexps
   Which directories should be excluded from the sources-read-only-check.  If
   a directory matches any of the regexps of this option their sources will
   not be checked if they are writable - This option takes only effect if
   `ecb-sources-perform-read-only-check' is not nil.

 - User Option: show-source-file-extension
   Show the file extension of source files.

 - User Option: source-file-regexps
   Specifies which files are shown as source files.

   This is done on directory-base, which means for each directory-regexp the
   files to display can be specified. If more than one directory-regexp
   matches the current selected directory then always the first one (and its
   related file-exclude/include-regexps) is used! If no directory-regexp
   matches then all files are displayed for the currently selected directory.

   Important note: It is recommended that the *LAST* element of this list
   should contain an always matching directory-regexp (`".*"')!

   So the value of this option is a list of cons-cells where the car is a
   directory regexp and the cdr is a 2 element list where the first element
   is a list of exclude regexps and the second element is a list of include
   regexps. A file is displayed in the source-buffer of ECB iff: The file
   does not match any of the exclude regexps OR the file matches at least one
   of the include regexps.

   But regardless of the value of this option a file F is never displayed in
   the sources-buffer if the directory matches
   `ecb-sources-exclude-cvsignore' and the directory contains a file
   .cvsignore which contains F as an entry!

   There are three predefined and useful combinations of an exclude and
   include regexp:

    * All files

    * All, but no backup, object, lib or ini-files (except .emacs and .gnus).
      This means all files except those starting with ".", "#" or ending with
      "~", ".elc", ".obj", ".o", ".lib", ".dll", ".a", ".so". (but including
      .emacs and .gnus)

    * Common source file types (.c, .java etc.)

   In addition to these predefined values a custom exclude and include
   combination can be defined.

   Tips for the directory- and file-rexexps: `"$^"' matches no
   files/directories, `".*"' matches all files/directories.

 - User Option: sources-buffer-after-create-hook
   Local hook running after the creation of the sources-buffer. Every
   function of this hook is called once without arguments direct after
   creating the sources-buffer of ECB and it's local key-map. So for example
   a function could be added which performs calls of `local-set-key' to
   define new keybindings only for the sources-buffer of ECB.

 - User Option: sources-buffer-name
   Name of the ECB sources buffer. Because it is not a normal buffer for
   editing you should enclose the name with stars, e.g. "*ECB Sources*".

   If it is necessary for you you can get emacs-lisp access to the
   buffer-object of the ECB-sources-buffer by this name, e.g. by a call of
   `set-buffer'.

   Changes for this option at runtime will take affect only after
   deactivating and then activating ECB again!

 - User Option: sources-exclude-cvsignore
   Specify if files contained in a `.cvsignore' should be excluded.

   Value is a list of regular expressions or nil. If you want to exclude
   files listed in a `.cvsignore'-file from being displayed in the
   ecb-sources-buffer then specify a regexp for such a directory.

   If you want to exclude the contents of `.cvsignore'-files for every
   directory then you should add one regexp ".*" which matches every
   directory.

   If you never want to exclude the contents of `.cvsignore'-files then set
   this option to nil.

 - User Option: sources-menu-sorter
   Function which re-sorts the menu-entries of the directories buffer.

   If a function then this function is called to sort the menu-entries of the
   combined menu-entries of the user-menu-extensions of
   `ecb-sources-menu-user-extension' and the built-in-menu
   `ecb-sources-menu'. If nil then no special sorting will be done and the
   user-extensions are placed in front of the built-in-entries.

   For the guidelines for such a sorter-function see
   `ecb-directories-menu-sorter'.

 - User Option: sources-menu-user-extension
   Static user extensions for the popup-menu of the sources buffer. For
   further explanations see `ecb-directories-menu-user-extension'.

   The node-argument of a menu-function contains as data the filename of the
   source for which the popup-menu has been opened.

   Per default the static user-extensions are added at the beginning of the
   built-in menu-entries of `ecb-sources-menu' but the whole menu can be
   re-arranged with `ecb-sources-menu-sorter'.

 - User Option: sources-menu-user-extension-function
   Dynamic user extensions for the popup-menu of the sources buffer. A
   function which has to return a list in the same format like the option
   `ecb-sources-menu-user-extension'. This function is called when the user
   opens the popup-menu for the sources buffer.

   Per default the dynamic user-extensions are added in front of the static
   extensions of `ecb-sources-menu-user-extension' but the whole menu can be
   re-arranged with `ecb-sources-menu-sorter'.

 - User Option: sources-perform-read-only-check
   Check if source-items in the tree-buffers are read-only. If a sourcefile
   is read-only then it will be displayed with that face set in the option
   `ecb-source-read-only-face'.

   Because this check can be take some time if files are used via a mounted
   net-drive ECB performs this check stealthy (see
   `ecb-stealthy-tasks-delay') so normally there should no
   performance-decrease or additional waiting-time for the user. But to get
   sure this option offers three choices: `t', `unless-remote' and `nil'. See
   `ecb-prescan-directories-for-emptyness' for an explanation for these three
   choices.

   The option `ecb-read-only-check-exclude-regexps' offers are more fine
   granularity to exclude the sources of certain directories from the
   read-only state-check.

 - User Option: sources-sort-ignore-case
   Ignore case for sorting the source-files of the Sources-buffer. See also
   `ecb-sources-sort-method'.

 - User Option: sources-sort-method
   Defines how the source files are sorted.

    - `name': Sorting by name.

    - `extension': Sorting first by extension and then by name.

    - `nil': No sorting, means source files are displayed in the sequence
      returned by `directory-files' (called without sorting).

   See also `ecb-sources-sort-ignore-case'


File: ecb.info,  Node: ecb-methods,  Next: ecb-history,  Prev: ecb-sources,  Up: Customizable options

Group ecb-methods
-----------------

This group contains settings for the methods-buffer in the ECB:

 - User Option: auto-expand-tag-tree
   Expand the methods-tag-tree automatically if node invisible.

   This option has only an effect if option `ecb-highlight-tag-with-point' is
   switched on too. There are three possible choices:
    - `nil': No auto. expanding of the method buffer.

    - `expand-spec': Auto expand the method-buffer nodes if the node
      belonging to current tag under point is invisible because its
      parent-node is collapsed.  But expanding is only done if the type of
      the tag under point in the edit-buffer is contained in
      `ecb-methods-nodes-expand-spec'.

    - `all': Like expand-spec but expands all tags regardless of the setting
      in `ecb-methods-nodes-expand-spec'.

   This options takes only effect for semantic-sources - means sources
   supported by semantic!

 - User Option: auto-expand-tag-tree-collapse-other
   Auto. expanding the tag-tree collapses all not related nodes. There are
   several choices:

    - Only if on tag: This means collapsing all nodes which have no relevance
      for the currently highlighted node will be collapsed, because they are
      not necessary to make the highlighted node visible. But do this only if
      point stays onto a tag in the selected edit-window.

    - Always: Same as before but collapse also when point doesn't stays on a
      tag (e.g. between two defuns in elisp) in the selected edit-window. This
      means in such a situation a full collapsing of the methods-buffer.

    - Never: Do not automatically collapse the methods-buffer.

 - User Option: auto-update-methods-after-save
   Automatically updating the ECB method buffer after saving a source.

 - User Option: default-tag-filter
   Default tag-filters for certain files. This option allow to define default
   tag-filters for certain files which are applied automatically after
   loading such a file into a buffer. The possible filters are the same as
   offered by the command `ecb-methods-filter' and they are applied in the
   same manner - the only difference is they are applied automatically.
   Please be aware that symbol-filters (e.g.  protection-symbols like public
   or private) must not be inserted with quotes whereas a filter-regexp has
   to be inserted with surrounding double-quotes! In addition backslashes in
   a regexp have to be doubled!

   For each file-spec (a major-mode plus a file-regexp which both specify a
   file for which filters should be applied) there can be as much filters as
   needed - they are layered like with `ecb-methods-filter' too.

   Tag-classes which are completely hidden or excluded by the option
   `ecb-show-tags' will never being displayed in the Methods-buffer
   regardless of the filters of this option!

 - User Option: display-image-icons-for-semantic-tags
   Display nice and pretty icons for semantic-tags in the Methods-buffer.
   This option takes only effect if Emacs can display images and if
   `ecb-tree-buffer-style' is set to `image'.

 - User Option: exclude-parents-regexp
   Regexps which parent classes should not be shown in the methods buffer
   (see also `ecb-show-parents'). If nil then all parents will be shown if
   `ecb-show-parents' is not nil.

   This options takes only effect for semantic-sources - means sources
   supported by semantic!

 - User Option: expand-methods-switch-off-auto-expand
   Switch off auto expanding in the ECB-method buffer. If on then auto
   expanding is switched off after explicit expanding or collapsing by
   `ecb-expand-methods-nodes'.

   This is done with `ecb-toggle-auto-expand-tag-tree' so after the switch
   off the auto expanding feature can again switched on quickly.

   But after explicitly expanding/collapsing the methods-buffer to a certain
   level the auto. expanding could undo this when the node belonging to
   current tag under point in the current active edit-window is invisible
   after `ecb-expand-methods-nodes' - then the auto.  expand feature would
   make this node immediately visible and destroys the explicitly set
   expand-level.

 - User Option: font-lock-tags
   Adds font-locking (means highlighting) to the ECB-method buffer.

   This options takes only effect for semantic-sources - means sources
   supported by semantic!

 - User Option: highlight-tag-with-point
   How to highlight the method or variable under the cursor.

    - `highlight-scroll': Always scroll the method buffer, so the current
      method of the edit-window is highlighted in the method-window.

    - `highlight': Only highlight the current method of the edit window in the
      method window if the method is visible in the method-window.

    - `nil': No highlighting is done.

   See also `ecb-highlight-tag-with-point-delay'.

   This options takes only effect for semantic-sources - means sources
   supported by semantic!

 - User Option: highlight-tag-with-point-delay
   Time Emacs must be idle before current tag is highlighted. If nil then
   there is no delay, means current tag is highlighted immediately. A small
   value of about 0.25 seconds saves CPU resources and you get even though
   almost the same effect as if you set no delay.  But such a delay prevents
   also "jumping backward/forward" during scrolling within java-classes if
   point goes out of method-definition into class-definition. Therefore the
   default value is a delay of 0.25 seconds.

   This options takes only effect for semantic-sources - means sources
   supported by semantic!

 - User Option: methods-buffer-after-create-hook
   Local hook running after the creation of the methods-buffer. Every
   function of this hook is called once without arguments direct after
   creating the methods-buffer of ECB and it's local key-map. So for example
   a function could be added which performs calls of `local-set-key' to
   define new keybindings only for the methods-buffer of ECB.

 - User Option: methods-buffer-name
   Name of the ECB methods buffer. Because it is not a normal buffer for
   editing you should enclose the name with stars, e.g. " *ECB Methods*".

   If it is necessary for you you can get emacs-lisp access to the
   buffer-object of the ECB-methods-buffer by this name, e.g. by a call of
   `set-buffer'.

   Changes for this option at runtime will take affect only after
   deactivating and then activating ECB again!

 - User Option: methods-filter-replace-existing
   How the methods-filter should be applied to existing filters. There are
   three different choices:

    - `never': This is the default and means that calling `ecb-methods-filter'
      always adds the new filter on top of already existing filters. So you
      can combine several filter to one combined like this example: 'Display
      only all public methods having the string "test" in its name.' With
      this setting the filters can only be cleared by calling
      `ecb-methods-filter' and then choosing "nothing".

    - `always': This means that `ecb-methods-filter' always clears a previous
      filter before applying the new one.

    - `ask': ECB asks if the new filter should replace the existing ones.

 - User Option: methods-menu-sorter
   Function which re-sorts the menu-entries of the directories buffer.

   If a function then this function is called to sort the menu-entries of the
   combined menu-entries of the user-menu-extensions of
   `ecb-methods-menu-user-extension' and the built-in-menu
   `ecb-methods-menu'. If nil then no special sorting will be done and the
   user-extensions are placed in front of the built-in-entries.

   For the guidelines for such a sorter-function see
   `ecb-directories-menu-sorter'.

 - User Option: methods-menu-user-extension
   Static user extensions for the popup-menu of the methods buffer. For
   further explanations see `ecb-directories-menu-user-extension'.

   The node-argument of a menu-function contains as data the semantic-tag of
   the method/variable/tag for which the popup-menu has been opened.

   Per default the static user-extensions are added at the beginning of the
   built-in menu-entries of `ecb-methods-menu' but the whole menu can be
   re-arranged with `ecb-methods-menu-sorter'.

 - User Option: methods-menu-user-extension-function
   Dynamic user extensions for the popup-menu of the methods buffer. A
   function which has to return a list in the same format like the option
   `ecb-methods-menu-user-extension'. This function is called when the user
   opens the popup-menu for the methods buffer. For an example how such a
   function can be programmed see `ecb-methods-menu-editwin-entries'.

   Per default the dynamic user-extensions are added in front of the static
   extensions of `ecb-methods-menu-user-extension' but the whole menu can be
   re-arranged with `ecb-methods-menu-sorter'.

 - User Option: methods-nodes-collapse-spec
   Semantic tag-types collapsed by `ecb-expand-methods-nodes'.  For valid
   values of this option see `ecb-methods-nodes-expand-spec'!

   This options takes only effect for semantic-sources - means sources
   supported by semantic!

 - User Option: methods-nodes-expand-spec
   Semantic tag-types expanded by `ecb-expand-methods-nodes'.

   The value of this option is either the symbol `all' (all tags are expanded
   regardless of their type) or a list of symbols where each symbol is a
   valid semantic tag-type. For a description of semantic tag types see
   option `ecb-show-tags'.

   But this option also defines if bucket-nodes in the ECB-method-buffer
   (e.g. "[Variables]") should be expanded. Therefore valid symbols for this
   list are also all cars of the variable returned by
   `ecb--semantic-symbol->name-assoc-list'.

   If there is a bucket-name (the node-name stripped of the settings in
   `ecb-bucket-node-display') which is not contained as cdr in the value
   returned by `ecb--semantic-symbol->name-assoc-list' then the symbol with
   this bucket-name as name is also a valid symbol for this list. Example: In
   ECB there are buckets "[Parents]". The bucket-name is "Parents" and the
   valid symbol-name is then `Parents'.

   This options takes only effect for semantic-sources - means sources
   supported by semantic!

 - User Option: methods-separate-prototypes
   Separate function-prototypes from the real functions. This is for example
   useful for C++ and C because these languages distinct between a
   method-prototype (rsp. function-prototype for C) and the method (rsp.
   function for C) itself. If this option is not nil then ECB separates the
   prototypes from the real function/methods. Then with `ecb-show-tags' the
   user can define different display-settings for each of them. If this
   option is nil then the prototypes and the real functions are filled in the
   same bucket and displayed plain and there is no sorting between prototypes
   and functions possible. If this option is switched on then it is senseful
   that `ecb-show-tags' contains for all modes which distinct between
   prototypes and real functions/methods two entries for the tag-type
   'function - see the documentation of this option.

 - User Option: post-process-semantic-taglist
   Define mode-dependent post-processing for the semantic-taglist. This is an
   alist where the car is a major-mode symbol and the cdr is a list of
   function-symbols of functions which should be used for post-processing the
   taglist (returned by `ecb--semantic-bovinate-toplevel') for a buffer in
   this major-mode. The first function in the list is called with current
   semantic taglist of current buffer and must return a valid taglist again.
   All other functions are called with the result-taglist of its preceding
   function and have to return a new taglist again.

   For oo-programming languages where the methods of a class can be defined
   outside the class-definition (e.g. C++, Eieio) the function
   `ecb-group-function-tags-with-parents' can be used to get a much better
   method-display in the methods-window of ECB, because all method
   implementations of a class are grouped together.

   Another senseful usage is to filter out certain tags, e.g. prototype tags
   in `c-mode'. For this you can set `ecb-filter-c-prototyp-tags'.

   This options takes only effect for semantic-sources - means sources
   supported by semantic!

 - User Option: show-only-positioned-tags
   Show only nodes in the method-buffer which are "jump-able". If not nil
   then ECB displays in the method-buffer only nodes which are "jump-able",
   i.e. after selecting it by clicking or with RET then ECB jumps to the
   corresponding location in the edit-window. Example: With CLOS or Eieio
   source-code there can exist some position-less nodes like
   variable-attributes in a `defclass' form which are only displayed if this
   option is nil. Displaying such nodes can be senseful even if they can not
   be jumped.

   This options takes only effect for semantic-sources - means sources
   supported by semantic!

 - User Option: show-tags
   How to show tags in the methods buffer first time after find-file.  This
   functionality is set on a major-mode base, i.e. for every major-mode a
   different setting can be used. The value of this option is a list of
   cons-cells:

   The car is either a major-mode symbol or the special symbol 'default which
   means if no setting for a certain major-mode is defined then the cdr of
   the 'default cons-cell is used. This option should always contain a
   default-setting!

   The cdr is a list where each element represents a type of tags:

      (<tag type> <display type> <sort method>)

   There can be more than 1 element for a certain <tag type>. This is for
   example useful for C++ and C because these languages distinct between a
   method-prototype (rsp. function-prototype for C) and the method (rsp.
   function for C) itself. The default value of these option contains two
   entries for <tag type> is `function' whereas the first one is responsible
   for the "real" methods (rsp. functions) and the second one for the
   prototypes. So if the methods should be flattened and the prototypes
   collapsed the show-tags-list for C++ and C must contain two entries for
   <tag type> `function', the first one defined as `flattened' and the second
   one defined as `collapsed'.

   The tags in the methods buffer are displayed in the order as they appear in
   this list.

  `<tag type>'
      A Semantic tag type symbol (function, variable, rule, include etc.)  or
      one of the following:

       - `t': All tag types not specified anywhere else in the list.

       - `parent': The parents of a type.

  `<display type>'
      A symbol which describes how the tags of this type shall be shown:

       - `expanded': The tags are shown in an expanded node.

       - `collapsed': The tags are shown in a collapsed node.

       - `flattened': The tags are added to the parent node.

       - `hidden': The tags are not shown.

  `<sort method>'
      A symbol describing how to sort the tags of this type:

       - `name': Sort by the tag name.

       - `access': Sort by tag access (public, protected, private) and then
         by name.

       - `nil': Don't sort tags. They appear in the same order as in the
         source buffer.

   This options takes only effect for semantic-sources - means sources
   supported by semantic!

 - User Option: tag-display-function
   Function to use for displaying tags in the methods buffer. This
   functionality is set on major-mode base, i.e. for every major-mode a
   different function can be used. The value of this option is a list of
   cons-cells:

    - The car is either a major-mode symbol or the special symbol 'default
      which means if no function for a certain major-mode is defined then the
      cdr of the 'default cons-cell is used.

    - The cdr is the function used for displaying a tag in the related
      major-mode.

   Every function is called with 3 arguments:

   1. The tag

   2. The parent-tag of tag (can be nil)

   3. The value of `ecb-font-lock-tags'.

   Every function must return the display of the tag as string, colorized if
   the third argument is not nil.

   The following functions are predefined:

    * For each element E of `ecb--semantic-format-function-alist' exists a
      function with name "ecb-<(cdr E)>". These functions are just aliase to
      the builtin format-functions of semantic. See the docstring of these
      functions to see what they do. Example: (semantic-name-nonterminal .
      semantic-format-tag-name) is an element of
      `ecb--semantic-format-function-alist'. Therefore the alias-function for
      this element is named `ecb--semantic-format-tag-name'.

    * For every cdr in `ecb--semantic-format-function-alist' with name
      "semantic-XYZ" a function with name "ecb-XYC" is predefined. The
      differences between the semantic- and the ECB-version are:

       - The ECB-version displays for type tags only the type-name and nothing
         else (exception: In c++-mode a template specifier is appended to the
         type-name if a template instead a normal class).

       - The ECB-version displays type-tags according to the setting in
         `ecb-type-tag-display'. This is useful for better recognizing
         different classes, structs etc. in the ECB-method window.

      For all tags which are not types the display of the ECB-version is
      identical to the semantic version. Example: For
      `ecb--semantic-format-tag-name' (one of the builtin semantic
      formatters) the pendant is `ecb-format-tag-name'.

   This functionality also allows the user to display tags as UML. To enable
   this functionality set the function for a major-mode \(e.g.  `jde-mode') to
   `ecb--semantic-format-tag-uml-concise-prototype',
   `ecb--semantic-format-tag-uml-prototype', or
   `ecb--semantic-format-tag-uml-abbreviate' the ECB-versions of these
   functions.

   If the value is `nil', i.e. neither a function for a major-mode is defined
   nor the special 'default, then `ecb--semantic-format-tag-prototype' is
   used for displaying the tags.

   This options takes only effect for semantic-sources - means sources
   supported by semantic!

 - User Option: tag-jump-sets-mark
   Set the mark after jumping to a tag from the ECB-method buffer. If set the
   user can easily jump back.

 - User Option: tag-visit-post-actions
   Actions to perform after visiting a tag from the Method-buffer. With this
   option actions can be added which will be performed after visiting the
   start of the tag in the source-buffer.

   This functionality is set on a `major-mode' base, i.e. for every
   `major-mode' a different setting can be used. The value of this option is
   a list of cons-cells:
    - The car is either a `major-mode' symbol or the special symbol 'default.

    - The cdr is a list of action-functions or nil.

   ECB first performs all actions defined for the special symbol 'default (if
   any) and then all actions defined for current `major-mode' (if any).

   ECB offers some predefined senseful action-functions. Currently there are:
   `ecb-tag-visit-highlight-tag-header' `ecb-tag-visit-smart-tag-start'
   `ecb-tag-visit-recenter' `ecb-tag-visit-recenter-top'
   `ecb-tag-visit-goto-doc-start' `ecb-tag-visit-narrow-tag' See the
   documentation of these function for details what they do.

   But you can add any arbitrary function if the following conditions are
   fulfilled: The function gets the semantic tag as argument, returns the
   (new) point after finishing its job and the function must not put the
   point outside the tag-boundaries of the tag-argument.

 - User Option: type-tag-display
   How to display semantic type-tags in the methods buffer. Normally all tag
   displaying, colorizing and facing is done by semantic according to the
   value returned by `ecb--semantic-format-face-alist' and the semantic
   display-function (e.g. one from `ecb--semantic-format-tag-functions'). But
   sometimes a finer distinction in displaying the different type specifiers
   of type-tags can be useful. For a description when this option is
   evaluated look at `ecb-tag-display-function'!

   This functionality is set on a major-mode base, i.e. for every major-mode
   a different setting can be used. The value of this option is a list of
   cons-cells:

    * The car is either a major-mode symbol or the special symbol 'default
      which means if no setting for a certain major-mode is defined then the
      cdr of the 'default cons-cell is used.

    * The cdr is a list of 3-element-lists:

      1. First entry is a semantic type specifier in string-form. Current
         available type specifiers are for example "class", "interface",
         "struct", "typedef" and "enum". In addition to these ones there is
         also a special ECB type specifier "group" which is related to
         grouping tags (see `ecb-post-process-semantic-taglist' and
         `ecb-group-function-tags-with-parents'). Any arbitrary specifier can
         be set here but if it is not "group" or not known by semantic it
         will be useless.

      2. Second entry is a flag which indicates if the type-specifier string
         from (1.) itself should be removed (if there is any) from the
         display.

      3. Third entry is the face which is used in the ECB-method window to
         display type-tags with this specifier. ECB has some predefined faces
         for this (`ecb-type-tag-class-face', `ecb-type-tag-interface-face',
         `ecb-type-tag-struct-face', `ecb-type-tag-typedef-face',
         `ecb-type-tag-union-face', `ecb-type-tag-enum-face' and
         `ecb-type-tag-group-face') but any arbitrary face can be set here.
         This face is merged with the faces semantic already uses to display
         a tag, i.e. the result is a display where all face-attributes of the
         ECB-face take effect plus all face-attributes of the semantic-faces
         which are not set in the ECB-face (with XEmacs this merge doesn't
         work so here the ECB-face replaces the semantic-faces; this may be
         fixed in future versions).

   The default value is nil means there is no special ECB-displaying of
   type-tags in addition to the displaying and colorizing semantic does. But
   a value like the following could be a useful setting:

      ((default
         ("class" t ecb-type-tag-class-face)
         ("group" nil ecb-type-tag-group-face))
       (c-mode
        ("struct" nil ecb-type-tag-struct-face)
        ("typedef" nil ecb-type-tag-typedef-face)))

   This means that in `c-mode' only "struct"s and "typedef"s are displayed
   with special faces (the specifiers itself are not removed) and in all
   other modes "class"s and grouping-tags (see `ecb-tag-display-function',
   `ecb-group-function-tags-with-parents') have special faces and the "class"
   specifier-string is removed from the display.

   This options takes only effect for semantic-sources - means sources
   supported by semantic!

 - User Option: type-tag-expansion
   Default expansion of semantic type-tags. Semantic groups type-tags in
   different type-specifiers. Current available type specifiers are for
   example "class", "interface", "struct", "typedef", "union" and "enum". In
   addition to these ones there is also a special ECB type-specifier "group"
   which is related to grouping tags (see
   `ecb-post-process-semantic-taglist').

   This option defines which type-specifiers should be expanded at
   file-open-time. Any arbitrary specifier can be set here but if it is not
   "group" or not known by semantic it will be useless.

   This functionality is set on a major-mode base, i.e. for every major-mode
   a different setting can be used. The value of this option is a list of
   cons-cells:

    * The car is either a major-mode symbol or the special symbol `default'
      which means if no setting for a certain major-mode is defined then the
      cdr of the `default' cons-cell is used.

    * The cdr is either a list of type-specifiers which should be expanded at
      file-open-time or the symbol `all-specifiers' (then a type-tag is
      always expanded regardless of its type-specifier).

   This options takes only effect for semantic-sources - means sources
   supported by semantic!

