;; Object own/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "own/"
  :tables (list 
   (semanticdb-table "ioke-mode.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("ioke-version" variable (:constant-flag t :default-value "0") nil [896 952]) ("ioke-interpreter-executable" variable (:constant-flag t :default-value "ioke") nil [954 1019]) ("ioke-indent-offset" variable (:constant-flag t :default-value 2) nil [1021 1080]) ("ioke-electric-parens-p" variable (:constant-flag t :default-value t) nil [1082 1182]) ("ioke-clever-indent-p" variable (:constant-flag t :default-value t) nil [1184 1291]) ("ioke-auto-mode-p" variable (:constant-flag t :default-value t) nil [1293 1381]) ("ioke-comment-face" variable (:constant-flag t :default-value font-lock-comment-face) nil [1383 1468]) ("ioke-prototype-face" variable (:constant-flag t :default-value font-lock-type-face) nil [1470 1562]) ("ioke-cell-face" variable (:constant-flag t :default-value font-lock-function-name-face) nil [1564 1649]) ("ioke-object-face" variable (:constant-flag t :default-value font-lock-builtin-face) nil [1651 1741]) ("ioke-operator-face" variable (:constant-flag t :default-value font-lock-variable-name-face) nil [1743 1836]) ("ioke-special-face" variable (:constant-flag t :default-value font-lock-warning-face) nil [1838 1932]) ("ioke-number-face" variable (:constant-flag t :default-value font-lock-constant-face) nil [1934 2018]) ("ioke-braces-face" variable (:constant-flag t :default-value font-lock-preprocessor-face) nil [2020 2107]) ("ioke-object-assign-face" variable (:constant-flag t :default-value font-lock-builtin-face) nil [2109 2209]) ("ioke-object-clone-face" variable (:constant-flag t :default-value font-lock-warning-face) nil [2211 2307]) ("ioke-custom-face" variable (:constant-flag t :default-value font-lock-builtin-face) nil [2309 2397]) ("ioke-nothing-face" variable (:constant-flag t :default-value font-lock-builtin-face) nil [2399 2487]) ("ioke-prototype-names" variable (:constant-flag t :default-value (quote ("Base" "DefaultBehavior" "Ground" "Origin" "System" "Runtime" "Text" "Number" "Method" "DefaultMethod" "JavaMethod" "Mixins" "Restart"))) nil [2489 3152]) ("ioke-cell-names" variable (:constant-flag t :default-value (quote ("print" "println" "cell" "documentation" "ifMain" "while" "until" "asText" "representation" "fn" "fnx" "loop" "bind" "restart"))) nil [3154 3757]) ("ioke-operator-symbols" variable (:constant-flag t :default-value (quote ("..." "=>" "++" "--" "*" "/" "%" "+" "-" "<<" ">>" ">" "<" "<=" ">=" "<=>" "==" "!=" "&" "^" "|" "&&" "||" ".." "=" "+=" "-=" "*=" "/=" "%=" "&=" "^=" "|=" "<<=" ">>=" ":=" "<-" "<->" "->"))) nil [3759 4298]) ("ioke-operator-names" variable (:constant-flag t :default-value (quote ("return" "break" "mimic" "self" "use" "if" "method"))) nil [4300 4672]) ("ioke-special-names" variable (:constant-flag t :default-value (quote ("true" "false" "nil" "`" "'" "." "@" "@@"))) nil [4674 5057]) ("ioke-custom-names" variable (:constant-flag t :default-value (quote nil)) nil [5059 5164]) ("ioke-region-comment-prefix" variable (:constant-flag t :default-value ";") nil [5166 5238]) ("ioke-mode-hook" variable nil nil [5240 5286]) ("ioke-keymap" variable (:default-value (let ((ioke-keymap (make-sparse-keymap))) (if ioke-electric-parens-p (progn (define-key ioke-keymap "" (quote ioke-eval-buffer)) (define-key ioke-keymap "(" (quote ioke-electric-open-paren)) (define-key ioke-keymap ")" (quote ioke-electric-close-paren)) (define-key ioke-keymap "[" (quote ioke-electric-open-s-paren)) (define-key ioke-keymap "]" (quote ioke-electric-close-s-paren)) (define-key ioke-keymap "{" (quote ioke-electric-open-c-paren)) (define-key ioke-keymap "}" (quote ioke-electric-close-c-paren)) (define-key ioke-keymap (kbd "C-/") (quote comment-or-uncomment-region)))) ioke-keymap)) nil [5288 5991]) ("ioke-font-lock-keywords" variable (:constant-flag t :default-value (list (quote (";.*$" 0 ioke-comment-face t)) (\` ((\, (concat "\\<" (regexp-opt ioke-prototype-names t) "\\>")) . ioke-prototype-face)) (\` ((\, (concat "\\<[A-Z][[:alnum:]!?_:-]*\\>")) . ioke-prototype-face)) (\` ((\, (concat "\\<" (regexp-opt ioke-cell-names t) "\\>")) . ioke-cell-face)) (\` ((\, (concat "\\<" (regexp-opt ioke-custom-names t) "\\>")) . ioke-custom-face)) (\` ((\, (concat "\\<" (regexp-opt ioke-operator-names t) "\\>")) . ioke-operator-face)) (\` ((\, (regexp-opt ioke-special-names t)) . ioke-special-face)) (\` ((\, (regexp-opt ioke-operator-symbols t)) . ioke-operator-face)) (quote ("\\([[:alnum:]!?_:-]+\\)[[:space:]]*[+*/-]?=[^=]" 1 ioke-object-assign-face t)) (quote ("\\([[:alnum:]!?_:-]+\\)[[:space:]]*=[^=][[:space:]]*[[:alnum:]_:-]+[[:space:]]+mimic" 1 ioke-object-clone-face t nil)) (quote ("\\<[[:digit:]_]+\\>" 0 ioke-number-face t)) (quote ("[](){}[]+" 0 ioke-braces-face t)))) nil [5993 6991]) ("ioke-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 95 "w" st) (modify-syntax-entry 10 "> b" st) st)) nil [6993 7163]) ("ioke-eval-buffer" function nil nil [7165 7310]) ("ioke-indent-line" function (:user-visible-flag t) nil [7312 8843]) ("ioke-electric-open-paren" function (:user-visible-flag t) nil [8845 9124]) ("ioke-electric-close-paren" function (:user-visible-flag t) nil [9126 9430]) ("ioke-electric-open-c-paren" function (:user-visible-flag t) nil [9432 9713]) ("ioke-electric-close-c-paren" function (:user-visible-flag t) nil [9715 10021]) ("ioke-electric-open-s-paren" function (:user-visible-flag t) nil [10023 10304]) ("ioke-electric-close-s-paren" function (:user-visible-flag t) nil [10306 10612]) ("ioke-comment-region" function (:user-visible-flag t :arguments ("beg" "end" "&optional" "arg")) nil [10616 10803]) ("ioke-mode" function (:user-visible-flag t) nil [10805 11371]) ("ioke-mode" package nil nil [11373 11393]))
    :file "ioke-mode.el"
    :pointmax 11421
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre3"
  :semanticdb-version "2.0pre3"
  )
